diff --git a/dist/cjs/youtube/Client/Client.js b/dist/cjs/youtube/Client/Client.js
index c7bd7d4df0a1eee174d36f2483f5922b1a7c96e9..4ec2624b7680efed7fd1ffc2d17988d61bca2cb3 100644
--- a/dist/cjs/youtube/Client/Client.js
+++ b/dist/cjs/youtube/Client/Client.js
@@ -80,21 +80,32 @@ class Client {
     }
     /** Get video information by video id or URL */
     getVideo(videoId) {
-        var _a, _b;
         return __awaiter(this, void 0, void 0, function* () {
             const nextPromise = this.http.post(`${constants_1.I_END_POINT}/next`, { data: { videoId } });
             const playerPromise = this.http.post(`${constants_1.I_END_POINT}/player`, { data: { videoId } });
-            const [nextResponse, playerResponse] = yield Promise.all([nextPromise, playerPromise]);
-            const data = { response: nextResponse.data, playerResponse: playerResponse.data };
-            if (!((_b = (_a = data.response) === null || _a === void 0 ? void 0 : _a.contents) === null || _b === void 0 ? void 0 : _b.twoColumnWatchNextResults.results.results.contents) ||
-                data.playerResponse.playabilityStatus.status === "ERROR") {
+    
+            const [nextResult, playerResult] = yield Promise.allSettled([nextPromise, playerPromise]);
+    
+            const nextResponse = nextResult.status === "fulfilled" ? nextResult.value : null;
+            const playerResponse = playerResult.status === "fulfilled" ? playerResult.value : null;
+    
+            if (
+                !nextResponse ||
+                !nextResponse.data?.contents?.twoColumnWatchNextResults?.results?.results?.contents
+            ) {
                 return undefined;
             }
-            return (!data.playerResponse.playabilityStatus.liveStreamability
+    
+            const data = {
+                response: nextResponse.data,
+                playerResponse: playerResponse?.data,
+            };
+    
+            return !data.playerResponse.playabilityStatus.liveStreamability
                 ? new Video_1.Video({ client: this }).load(data)
-                : new LiveVideo_1.LiveVideo({ client: this }).load(data));
+                : new LiveVideo_1.LiveVideo({ client: this }).load(data);
         });
-    }
+    }    
     /** Get channel information by channel id+ */
     getChannel(channelId) {
         var _a, _b, _c;
diff --git a/dist/esm/youtube/Client/Client.js b/dist/esm/youtube/Client/Client.js
index 1c688649655f2deda8d41e24c7cd01297c0960f7..3625a15a39d4318f5679169a02ba4594062e14bb 100644
--- a/dist/esm/youtube/Client/Client.js
+++ b/dist/esm/youtube/Client/Client.js
@@ -160,29 +160,41 @@ var Client = /** @class */ (function () {
     };
     /** Get video information by video id or URL */
     Client.prototype.getVideo = function (videoId) {
-        var _a, _b;
         return __awaiter(this, void 0, void 0, function () {
-            var nextPromise, playerPromise, _c, nextResponse, playerResponse, data;
+            var nextPromise, playerPromise, _c, nextResult, playerResult, nextResponse, playerResponse, data;
             return __generator(this, function (_d) {
                 switch (_d.label) {
                     case 0:
                         nextPromise = this.http.post(I_END_POINT + "/next", { data: { videoId: videoId } });
                         playerPromise = this.http.post(I_END_POINT + "/player", { data: { videoId: videoId } });
-                        return [4 /*yield*/, Promise.all([nextPromise, playerPromise])];
+                        return [4 /*yield*/, Promise.allSettled([nextPromise, playerPromise])];
                     case 1:
-                        _c = __read.apply(void 0, [_d.sent(), 2]), nextResponse = _c[0], playerResponse = _c[1];
-                        data = { response: nextResponse.data, playerResponse: playerResponse.data };
-                        if (!((_b = (_a = data.response) === null || _a === void 0 ? void 0 : _a.contents) === null || _b === void 0 ? void 0 : _b.twoColumnWatchNextResults.results.results.contents) ||
-                            data.playerResponse.playabilityStatus.status === "ERROR") {
+                        _c = __read.apply(void 0, [_d.sent(), 2]), nextResult = _c[0], playerResult = _c[1];
+    
+                        // Extract responses if fulfilled, otherwise set to null
+                        nextResponse = nextResult.status === "fulfilled" ? nextResult.value : null;
+                        playerResponse = playerResult.status === "fulfilled" ? playerResult.value : null;
+    
+                        // Check if required data exists
+                        if (
+                            !nextResponse ||
+                            !nextResponse.data?.contents?.twoColumnWatchNextResults?.results?.results?.contents
+                        ) {
                             return [2 /*return*/, undefined];
                         }
-                        return [2 /*return*/, (!data.playerResponse.playabilityStatus.liveStreamability
+    
+                        data = { response: nextResponse.data, playerResponse: playerResponse?.data };
+    
+                        return [
+                            2 /*return*/,
+                            !data.playerResponse.playabilityStatus.liveStreamability
                                 ? new Video({ client: this }).load(data)
-                                : new LiveVideo({ client: this }).load(data))];
+                                : new LiveVideo({ client: this }).load(data),
+                        ];
                 }
             });
         });
-    };
+    };    
     /** Get channel information by channel id+ */
     Client.prototype.getChannel = function (channelId) {
         var _a, _b, _c;
